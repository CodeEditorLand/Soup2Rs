// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

mod address;
pub use self::address::{Address, NONE_ADDRESS};

mod auth;
pub use self::auth::{Auth, NONE_AUTH};

mod auth_basic;
pub use self::auth_basic::AuthBasic;

mod auth_digest;
pub use self::auth_digest::AuthDigest;

mod auth_domain;
pub use self::auth_domain::{AuthDomain, NONE_AUTH_DOMAIN};

mod auth_domain_basic;
pub use self::auth_domain_basic::{AuthDomainBasic, NONE_AUTH_DOMAIN_BASIC};

mod auth_domain_digest;
pub use self::auth_domain_digest::{AuthDomainDigest, NONE_AUTH_DOMAIN_DIGEST};

mod auth_manager;
pub use self::auth_manager::{AuthManager, NONE_AUTH_MANAGER};

mod auth_ntlm;
pub use self::auth_ntlm::AuthNTLM;

mod auth_negotiate;
pub use self::auth_negotiate::AuthNegotiate;

mod cache;
pub use self::cache::{Cache, NONE_CACHE};

mod content_decoder;
pub use self::content_decoder::{ContentDecoder, NONE_CONTENT_DECODER};

mod content_sniffer;
pub use self::content_sniffer::{ContentSniffer, NONE_CONTENT_SNIFFER};

mod cookie_jar;
pub use self::cookie_jar::{CookieJar, NONE_COOKIE_JAR};

mod cookie_jar_db;
pub use self::cookie_jar_db::{CookieJarDB, NONE_COOKIE_JAR_DB};

mod cookie_jar_text;
pub use self::cookie_jar_text::{CookieJarText, NONE_COOKIE_JAR_TEXT};

#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
mod hsts_enforcer;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
pub use self::hsts_enforcer::{HSTSEnforcer, NONE_HSTS_ENFORCER};

#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
mod hsts_enforcer_db;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
pub use self::hsts_enforcer_db::{HSTSEnforcerDB, NONE_HSTS_ENFORCER_DB};

mod logger;
pub use self::logger::{Logger, NONE_LOGGER};

mod message;
pub use self::message::{Message, NONE_MESSAGE};

mod multipart_input_stream;
pub use self::multipart_input_stream::{MultipartInputStream, NONE_MULTIPART_INPUT_STREAM};

mod proxy_resolver_default;
pub use self::proxy_resolver_default::{NONE_PROXY_RESOLVER_DEFAULT, ProxyResolverDefault};

#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
mod request;
#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
pub use self::request::{NONE_REQUEST, Request};

mod request_data;
pub use self::request_data::{NONE_REQUEST_DATA, RequestData};

mod request_file;
pub use self::request_file::{NONE_REQUEST_FILE, RequestFile};

#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
mod request_http;
#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
pub use self::request_http::{NONE_REQUEST_HTTP, RequestHTTP};

mod requester;
pub use self::requester::{NONE_REQUESTER, Requester};

mod server;
pub use self::server::{NONE_SERVER, Server};

mod session;
pub use self::session::{NONE_SESSION, Session};

mod session_async;
pub use self::session_async::{NONE_SESSION_ASYNC, SessionAsync};

#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
mod session_feature;
#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
pub use self::session_feature::{NONE_SESSION_FEATURE, SessionFeature};

mod session_sync;
pub use self::session_sync::{NONE_SESSION_SYNC, SessionSync};

mod socket;
pub use self::socket::{NONE_SOCKET, Socket};

#[cfg(any(feature = "v2_50", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
mod websocket_connection;
#[cfg(any(feature = "v2_50", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
pub use self::websocket_connection::{NONE_WEBSOCKET_CONNECTION, WebsocketConnection};

mod websocket_extension;
pub use self::websocket_extension::{NONE_WEBSOCKET_EXTENSION, WebsocketExtension};

#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
mod websocket_extension_deflate;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
pub use self::websocket_extension_deflate::{
	NONE_WEBSOCKET_EXTENSION_DEFLATE,
	WebsocketExtensionDeflate,
};

mod websocket_extension_manager;
pub use self::websocket_extension_manager::{
	NONE_WEBSOCKET_EXTENSION_MANAGER,
	WebsocketExtensionManager,
};

mod buffer;
pub use self::buffer::Buffer;

mod client_context;
pub use self::client_context::ClientContext;

#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
mod cookie;
#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
pub use self::cookie::Cookie;

mod date;
pub use self::date::Date;

#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
mod hsts_policy;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
pub use self::hsts_policy::HSTSPolicy;

mod message_body;
pub use self::message_body::MessageBody;

mod message_headers;
pub use self::message_headers::MessageHeaders;

#[cfg(any(feature = "v2_26", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_26")))]
mod multipart;
#[cfg(any(feature = "v2_26", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_26")))]
pub use self::multipart::Multipart;

mod uri;
pub use self::uri::URI;

mod enums;
#[cfg(any(feature = "v2_34", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
pub use self::enums::CacheType;
#[cfg(any(feature = "v2_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_30")))]
pub use self::enums::CookieJarAcceptPolicy;
#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
pub use self::enums::RequestError;
#[cfg(any(feature = "v2_70", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_70")))]
pub use self::enums::SameSitePolicy;
#[cfg(any(feature = "v2_40", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_40")))]
pub use self::enums::TLDError;
#[cfg(any(feature = "v2_50", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
pub use self::enums::WebsocketCloseCode;
#[cfg(any(feature = "v2_50", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
pub use self::enums::WebsocketConnectionType;
#[cfg(any(feature = "v2_50", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
pub use self::enums::WebsocketDataType;
#[cfg(any(feature = "v2_50", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
pub use self::enums::WebsocketError;
#[cfg(any(feature = "v2_50", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
pub use self::enums::WebsocketState;
pub use self::enums::{
	AddressFamily,
	CacheResponse,
	ConnectionState,
	DateFormat,
	Encoding,
	HTTPVersion,
	KnownStatusCode,
	LoggerLogLevel,
	MemoryUse,
	MessageHeadersType,
	MessagePriority,
	RequesterError,
	SocketIOStatus,
	Status,
	XMLRPCError,
	XMLRPCFault,
};

mod flags;
#[cfg(any(feature = "v2_48", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_48")))]
pub use self::flags::ServerListenOptions;
pub use self::flags::{Cacheability, Expectation, MessageFlags};

pub mod functions;

mod constants;
#[cfg(any(feature = "v2_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_30")))]
pub use self::constants::COOKIE_JAR_ACCEPT_POLICY;
#[cfg(any(feature = "v2_26", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_26")))]
pub use self::constants::FORM_MIME_TYPE_MULTIPART;
#[cfg(any(feature = "v2_26", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_26")))]
pub use self::constants::FORM_MIME_TYPE_URLENCODED;
#[cfg(any(feature = "v2_56", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_56")))]
pub use self::constants::LOGGER_LEVEL;
#[cfg(any(feature = "v2_56", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_56")))]
pub use self::constants::LOGGER_MAX_BODY_SIZE;
#[cfg(any(feature = "v2_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_30")))]
pub use self::constants::MESSAGE_FIRST_PARTY;
#[cfg(any(feature = "v2_44", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_44")))]
pub use self::constants::MESSAGE_PRIORITY;
#[cfg(any(feature = "v2_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_46")))]
pub use self::constants::MESSAGE_REQUEST_BODY_DATA;
#[cfg(any(feature = "v2_46", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_46")))]
pub use self::constants::MESSAGE_RESPONSE_BODY_DATA;
#[cfg(any(feature = "v2_34", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
pub use self::constants::MESSAGE_TLS_CERTIFICATE;
#[cfg(any(feature = "v2_34", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
pub use self::constants::MESSAGE_TLS_ERRORS;
#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
pub use self::constants::REQUEST_SESSION;
#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
pub use self::constants::REQUEST_URI;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
pub use self::constants::SERVER_ADD_WEBSOCKET_EXTENSION;
#[cfg(any(feature = "v2_44", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_44")))]
pub use self::constants::SERVER_HTTP_ALIASES;
#[cfg(any(feature = "v2_44", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_44")))]
pub use self::constants::SERVER_HTTPS_ALIASES;
#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
pub use self::constants::SERVER_REMOVE_WEBSOCKET_EXTENSION;
#[cfg(any(feature = "v2_38", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_38")))]
pub use self::constants::SERVER_TLS_CERTIFICATE;
#[cfg(any(feature = "v2_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_30")))]
pub use self::constants::SESSION_ACCEPT_LANGUAGE;
#[cfg(any(feature = "v2_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_30")))]
pub use self::constants::SESSION_ACCEPT_LANGUAGE_AUTO;
#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
pub use self::constants::SESSION_ADD_FEATURE;
#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
pub use self::constants::SESSION_ADD_FEATURE_BY_TYPE;
#[cfg(any(feature = "v2_38", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_38")))]
pub use self::constants::SESSION_HTTP_ALIASES;
#[cfg(any(feature = "v2_38", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_38")))]
pub use self::constants::SESSION_HTTPS_ALIASES;
#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
pub use self::constants::SESSION_IDLE_TIMEOUT;
#[cfg(any(feature = "v2_42", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
pub use self::constants::SESSION_LOCAL_ADDRESS;
#[cfg(any(feature = "v2_24", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
pub use self::constants::SESSION_REMOVE_FEATURE_BY_TYPE;
#[cfg(any(feature = "v2_30", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_30")))]
pub use self::constants::SESSION_SSL_STRICT;
#[cfg(any(feature = "v2_38", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_38")))]
pub use self::constants::SESSION_SSL_USE_SYSTEM_CA_FILE;
#[cfg(any(feature = "v2_38", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_38")))]
pub use self::constants::SESSION_TLS_DATABASE;
#[cfg(any(feature = "v2_48", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_48")))]
pub use self::constants::SESSION_TLS_INTERACTION;
#[cfg(any(feature = "v2_38", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_38")))]
pub use self::constants::SESSION_USE_THREAD_CONTEXT;
#[cfg(any(feature = "v2_34", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
pub use self::constants::SOCKET_TLS_CERTIFICATE;
#[cfg(any(feature = "v2_34", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_34")))]
pub use self::constants::SOCKET_TLS_ERRORS;
#[cfg(any(feature = "v2_38", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_38")))]
pub use self::constants::SOCKET_USE_THREAD_CONTEXT;
pub use self::constants::{
	ADDRESS_FAMILY,
	ADDRESS_NAME,
	ADDRESS_PHYSICAL,
	ADDRESS_PORT,
	ADDRESS_PROTOCOL,
	ADDRESS_SOCKADDR,
	AUTH_DOMAIN_ADD_PATH,
	AUTH_DOMAIN_BASIC_AUTH_CALLBACK,
	AUTH_DOMAIN_BASIC_AUTH_DATA,
	AUTH_DOMAIN_DIGEST_AUTH_CALLBACK,
	AUTH_DOMAIN_DIGEST_AUTH_DATA,
	AUTH_DOMAIN_FILTER,
	AUTH_DOMAIN_FILTER_DATA,
	AUTH_DOMAIN_GENERIC_AUTH_CALLBACK,
	AUTH_DOMAIN_GENERIC_AUTH_DATA,
	AUTH_DOMAIN_PROXY,
	AUTH_DOMAIN_REALM,
	AUTH_DOMAIN_REMOVE_PATH,
	AUTH_HOST,
	AUTH_IS_AUTHENTICATED,
	AUTH_IS_FOR_PROXY,
	AUTH_REALM,
	AUTH_SCHEME_NAME,
	COOKIE_JAR_DB_FILENAME,
	COOKIE_JAR_READ_ONLY,
	COOKIE_JAR_TEXT_FILENAME,
	HSTS_ENFORCER_DB_FILENAME,
	MESSAGE_FLAGS,
	MESSAGE_HTTP_VERSION,
	MESSAGE_IS_TOP_LEVEL_NAVIGATION,
	MESSAGE_METHOD,
	MESSAGE_REASON_PHRASE,
	MESSAGE_REQUEST_BODY,
	MESSAGE_REQUEST_HEADERS,
	MESSAGE_RESPONSE_BODY,
	MESSAGE_RESPONSE_HEADERS,
	MESSAGE_SERVER_SIDE,
	MESSAGE_SITE_FOR_COOKIES,
	MESSAGE_STATUS_CODE,
	MESSAGE_URI,
	SERVER_ASYNC_CONTEXT,
	SERVER_INTERFACE,
	SERVER_PORT,
	SERVER_RAW_PATHS,
	SERVER_SERVER_HEADER,
	SERVER_SSL_CERT_FILE,
	SERVER_SSL_KEY_FILE,
	SESSION_ASYNC_CONTEXT,
	SESSION_MAX_CONNS,
	SESSION_MAX_CONNS_PER_HOST,
	SESSION_PROXY_RESOLVER,
	SESSION_PROXY_URI,
	SESSION_SSL_CA_FILE,
	SESSION_TIMEOUT,
	SESSION_USE_NTLM,
	SESSION_USER_AGENT,
	SOCKET_ASYNC_CONTEXT,
	SOCKET_FLAG_NONBLOCKING,
	SOCKET_IS_SERVER,
	SOCKET_LOCAL_ADDRESS,
	SOCKET_REMOTE_ADDRESS,
	SOCKET_SSL_CREDENTIALS,
	SOCKET_SSL_FALLBACK,
	SOCKET_SSL_STRICT,
	SOCKET_TIMEOUT,
	SOCKET_TRUSTED_CERTIFICATE,
};

#[doc(hidden)]
pub mod traits {
	#[cfg(any(feature = "v2_68", feature = "dox"))]
	#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
	pub use super::hsts_enforcer::HSTSEnforcerExt;
	#[cfg(any(feature = "v2_68", feature = "dox"))]
	#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
	pub use super::hsts_enforcer_db::HSTSEnforcerDBExt;
	#[cfg(any(feature = "v2_42", feature = "dox"))]
	#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
	pub use super::request::RequestExt;
	#[cfg(any(feature = "v2_42", feature = "dox"))]
	#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_42")))]
	pub use super::request_http::RequestHTTPExt;
	#[cfg(any(feature = "v2_24", feature = "dox"))]
	#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_24")))]
	pub use super::session_feature::SessionFeatureExt;
	#[cfg(any(feature = "v2_50", feature = "dox"))]
	#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_50")))]
	pub use super::websocket_connection::WebsocketConnectionExt;
	pub use super::{
		address::AddressExt,
		auth::AuthExt,
		auth_domain::AuthDomainExt,
		auth_domain_basic::AuthDomainBasicExt,
		auth_domain_digest::AuthDomainDigestExt,
		auth_manager::AuthManagerExt,
		cache::CacheExt,
		content_sniffer::ContentSnifferExt,
		cookie_jar::CookieJarExt,
		cookie_jar_db::CookieJarDBExt,
		cookie_jar_text::CookieJarTextExt,
		logger::LoggerExt,
		message::MessageExt,
		multipart_input_stream::MultipartInputStreamExt,
		proxy_resolver_default::ProxyResolverDefaultExt,
		request_file::RequestFileExt,
		requester::RequesterExt,
		server::ServerExt,
		session::SessionExt,
		socket::SocketExt,
		websocket_extension::WebsocketExtensionExt,
	};
}
